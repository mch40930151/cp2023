<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite </a></p>
<p></p>
<h1>w5</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p></p>
<p>clear </p>
<p>cd downloads</p>
<p>cc gnuplot ex1.c</p>
<p>./a.out</p>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<h1>w6</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false;highlight:83" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);

int main() {
// width 3: height 2
int width = 1200;
int height = (int)(width*2.0 / 3.0);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_roc_flag(img);

FILE *outputFile = fopen("./roc_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}

void draw_roc_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
int center_x = (int)(width/4);
int center_y = (int)(height/4);
int sun_radius = (int)(width/8);

// Colors for the flag
red = gdImageColorAllocate(img, 242, 0, 0); // Red color
white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
blue = gdImageColorAllocate(img, 0, 41, 204); // Blue

// 繪製紅色矩形區域
gdImageFilledRectangle(img, 0, 0, width, height, red);

// 繪製藍色矩形區域
gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);

// 繪製太陽
draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);
}
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {
float angle = 0;
int numRays = 12; // 光芒的數量

gdPoint points[3]; // 三個頂點的陣列

for (int i = 0; i &lt; numRays; i++) {
angle = i * (2 * M_PI / numRays);
float x1 = center_x + cos(angle) * sun_radius;
float y1 = center_y + sin(angle) * sun_radius;

// 調整兩個底邊頂點的位置
float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);
float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);
float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);
float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);

// 設定多邊形的三個頂點
points[0].x = (int)x1;
points[0].y = (int)y1;
points[1].x = (int)x2;
points[1].y = (int)y2;
points[2].x = (int)x3;
points[2].y = (int)y3;

gdImageFilledPolygon(img, points, 3, white);
}
//外圈
gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);

// 繪製太陽內部
gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);
}</pre>
<p><img alt="" height="267" src="/images/roc_flag.png" width="400"/></p>
<p></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_United_States
// https://www.britannica.com/topic/flag-of-the-United-States-of-America
// 以下為幾乎要繪製完成的美國國旗, 請修改下列原始碼, 令其繪出正確的美國國旗
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // Colors for the flag
    red = gdImageColorAllocate(img, 178, 34, 52); // Red stripes
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 60, 59, 110); // Blue field

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // Corrected star size (half the original size)

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.126 * height); // Horizontal spacing between stars
    int star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars
    int star_start_x = (int)(0.122 * height); // Starting X position for stars
    int star_start_y = (int)(0.0485 * height); // Starting Y position for stars

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;
        int space_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;
        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x+space_x;
            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10+M_PI;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // Fill the star with white color
    gdImageFilledPolygon(img, points, 10, color);
}
</pre>
<p></p>
<p><img alt="" height="211" src="/images/usa_flag.png" width="400"/></p>
<pre class="brush:cpp;collapse:true;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);

int main() {
// width 3: height 2
int width = 1200;
int height = (int)(width*2.0 / 3.0);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_roc_flag(img);

FILE *outputFile = fopen("./roc_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}

void draw_roc_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
int center_x = (int)(width/4);
int center_y = (int)(height/4);
int sun_radius = (int)(width/8);

// Colors for the flag
red = gdImageColorAllocate(img, 242, 0, 0); // Red color
white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
blue = gdImageColorAllocate(img, 0, 41, 204); // Blue

// 繪製紅色矩形區域
gdImageFilledRectangle(img, 0, 0, width, height, red);

// 繪製藍色矩形區域
gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);

// 繪製太陽
draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);
}
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {
float angle = 0;
int numRays = 12; // 光芒的數量

gdPoint points[3]; // 三個頂點的陣列

for (int i = 0; i &lt; numRays; i++) {
angle = i * (2 * M_PI / numRays);
float x1 = center_x + cos(angle) * sun_radius;
float y1 = center_y + sin(angle) * sun_radius;

// 調整兩個底邊頂點的位置
float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);
float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);
float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);
float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);

// 設定多邊形的三個頂點
points[0].x = (int)x1;
points[0].y = (int)y1;
points[1].x = (int)x2;
points[1].y = (int)y2;
points[2].x = (int)x3;
points[2].y = (int)y3;

gdImageFilledPolygon(img, points, 3, white);
}
//外圈
gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);

// 繪製太陽內部
gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);
}</pre>
<p><br/><br/></p>
<h1>w7</h1>
<p><img alt="" height="267" src="/images/chinese_flag.png" width="400"/></p>
<p><img alt="" height="200" src="/images/uk_flag.png" width="400"/></p>
<p><img alt="" height="267" src="/images/japan_flag.png" width="400"/></p>
<p></p>
<h1>ANSIC</h1>
<p>1.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">include &lt;stdio.h&gt;

float temp_f;  /* 華氏度 */
float temp_c;  /* 攝氏度 */
char line_text[50]; /* 一行輸入 */

int main() {
    printf("輸入溫度（攝氏度）：");

    if (fgets(line_text, sizeof(line_text), stdin) == NULL) {
        // 處理錯誤（例如，打印錯誤消息或退出程序）。
        fprintf(stderr, "讀取輸入時發生錯誤。\n");
        return 1; // 返回非零值表示錯誤。
    }

    if (sscanf(line_text, "%f", &amp;temp_c) != 1) {
        // 處理錯誤（例如，打印錯誤消息或退出程序）。
        fprintf(stderr, "將輸入轉換為浮點數時發生錯誤。\n");
        return 1; // 返回非零值表示錯誤。
    }

    temp_f = ((9.0 / 5.0) * temp_c) + 32.0;
    printf("%f 度華氏。\n", temp_f);

    return 0;
}
</pre>
<p><img alt="" height="37" src="/images/test1.png" width="208"/></p>
<p>2.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    float rec_width;         /* 宣告變數 'rec_width' 以儲存矩形的寬度 */
    float rec_height;        /* 宣告變數 'rec_height' 以儲存矩形的高度 */
    float rec_perimeter;     /* 宣告變數 'rec_perimeter' 以儲存周長（將要計算的值） */

    // 提示使用者輸入矩形的高度。
    printf("輸入矩形的高度：");
    int heightScanResult = scanf("%f", &amp;rec_height);  // 從使用者處讀取 'rec_height' 的值。

    // 提示使用者輸入矩形的寬度。
    printf("輸入矩形的寬度：");
    int widthScanResult = scanf("%f", &amp;rec_width);  // 從使用者處讀取 'rec_width' 的值。

    // 使用公式計算矩形的周長：周長 = 2 * (寬度 + 高度)
    rec_perimeter = 2.0 * (rec_height + rec_width);

    // 印出計算得到的矩形周長。
    printf("矩形的周長為：%f\n", rec_perimeter);

    return 0;  // 表示程式執行成功。
}
</pre>
<p><img alt="" height="55" src="/images/test3.png" width="203"/></p>
<p>3.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int chk_year;

    printf("輸入一個年份：");
    if (scanf("%d", &amp;chk_year) != 1) {
        fprintf(stderr, "錯誤：輸入無效。請輸入有效的年份。\n");
        return 1; // 表示錯誤
    }

    if ((chk_year % 400) == 0)
        printf("%d年是閏年。\n", chk_year);
    else if ((chk_year % 100) == 0)
        printf("%d年不是閏年。\n", chk_year);
    else if ((chk_year % 4) == 0)
        printf("%d年是閏年。\n", chk_year);
    else
        printf("%d年不是閏年。\n", chk_year);

    return 0; // 表示成功執行
}
</pre>
<p></p>
<p><img alt="" height="36" src="/images/test4.png" width="154"/></p>
<p>4.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int num1, rem1;

    printf("輸入一個整數：");

    // 使用 scanf 函數讀取整數，同時檢查返回值確保成功讀取
    if (scanf("%d", &amp;num1) != 1) {
        fprintf(stderr, "錯誤：輸入無效。請輸入有效的整數。\n");
        return 1; // 表示錯誤
    }

    // 計算整數除以2的餘數
    rem1 = num1 % 2;

    // 根據餘數判斷奇偶性並輸出結果
    if (rem1 == 0)
        printf("%d 是偶數。\n", num1);
    else
        printf("%d 是奇數。\n", num1);

    return 0; // 表示成功執行
}
</pre>
<p><img alt="" height="33" src="/images/test5.png" width="156"/></p>
<p>5.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int j, sum = 0;

    printf("前10個自然數是：\n");

    for (j = 1; j &lt;= 10; j++) {
        sum = sum + j;
        printf("%d ", j);
    }

    printf("\n總和為：%d\n", sum);

    return 0;
}
</pre>
<p></p>
<p><img alt="" height="54" src="/images/test6.png" width="196"/></p>
<p>6.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int j, i, n;

    printf("輸入要生成的乘法表的數字範圍（從1開始）：");

    // 使用scanf函數讀取用戶輸入，同時檢查返回值確保成功讀取
    if (scanf("%d", &amp;n) != 1) {
        fprintf(stderr, "錯誤：輸入無效。請輸入一個有效的數字。\n");
        return 1; // 表示錯誤
    }

    printf("從1到%d的乘法表\n", n);

    for (i = 1; i &lt;= 10; i++) {
        for (j = 1; j &lt;= n; j++) {
            printf("%dx%d = %d, ", j, i, i*j);
        }
        printf("\n");
    }

    return 0; // 表示成功執行
}
</pre>
<p></p>
<p><img alt="" height="195" src="/images/test7.png" width="498"/></p>
<p>7.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

// 函數：計算一個數字的平方
double square(double num) {
    return (num * num);
}

int main() {
    int num;
    double n;

    printf("\n\n 函數：找出任意數字的平方：\n");
    printf("------------------------------------------------\n");

    printf("輸入任意數字以求平方：");

    // 使用scanf函數讀取用戶輸入，同時檢查返回值確保成功讀取
    if (scanf("%d", &amp;num) != 1) {
        fprintf(stderr, "錯誤：輸入無效。請輸入一個有效的數字。\n");
        return 1; // 表示錯誤
    }

    n = square(num);

    printf("%d的平方是：%.2f\n", num, n); 

    return 0; // 表示成功執行
}
</pre>
<p><img alt="" height="78" src="/images/test8.png" width="394"/></p>
<p>8.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;

// 函數：交換兩個數字
void swap(int *p, int *q) {
    int tmp;
    tmp = *p;   // tmp儲存n1的值
    *p = *q;    // *p儲存*q的值，即n2的值
    *q = tmp;   // *q儲存tmp的值，即n1的值
}

int main() {
    int n1, n2;

    printf("\n\n 函數：使用函數交換兩個數字：\n");
    printf("------------------------------------------------\n");

    printf("輸入第一個數字：");
    // 使用scanf函數讀取用戶輸入，同時檢查返回值確保成功讀取
    if (scanf("%d", &amp;n1) != 1) {
        fprintf(stderr, "錯誤：輸入無效。請輸入一個有效的數字。\n");
        return 1; // 表示錯誤
    }

    printf("輸入第二個數字：");
    // 使用scanf函數讀取用戶輸入，同時檢查返回值確保成功讀取
    if (scanf("%d", &amp;n2) != 1) {
        fprintf(stderr, "錯誤：輸入無效。請輸入一個有效的數字。\n");
        return 1; // 表示錯誤
    }

    printf("在交換之前：n1 = %d, n2 = %d ", n1, n2);
    // 將兩個變數的地址傳遞給函數。
    swap(&amp;n1, &amp;n2);
    printf("\n在交換之後：n1 = %d, n2 = %d \n\n", n1, n2);

    return 0;
}
</pre>
<p><img alt="" height="112" src="/images/test9.png" width="416"/></p>
<p>9.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;time.h&gt;
#include &lt;stdio.h&gt;  
#include &lt;stdlib.h&gt;

int main(void)
{
    time_t cur_time;     // 定義時間變數
    char* cur_t_string;  // 定義時間字串指標

    cur_time = time(NULL);  // 獲取當前時間
    if (cur_time == ((time_t)-1))
    {
        (void) fprintf(stderr, "無法獲取當前日期和時間。\n");
        exit(EXIT_FAILURE);
    }

    cur_t_string = ctime(&amp;cur_time); // 將時間轉換為本地時間格式
    if (cur_t_string == NULL)
    {
        (void) fprintf(stderr, "無法轉換當前日期和時間。\n");
        exit(EXIT_FAILURE);
    }

    (void) printf("\n 現在的時間是：%s \n", cur_t_string);
    exit(EXIT_SUCCESS);
}
</pre>
<p><img alt="" height="41" src="/images/test10.png" width="344"/></p>
<p>10.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main(void)
{
    time_t now;
    time(&amp;now); // 獲取當前時間

    struct tm beg_month;
    beg_month = *localtime(&amp;now); // 獲取本地時間結構體
    beg_month.tm_hour = 0;        // 將小時、分鐘、秒設置為0
    beg_month.tm_min = 0;
    beg_month.tm_sec = 0;
    beg_month.tm_mday = 1;         // 將日設置為1，即本月初

    double seconds = difftime(now, mktime(&amp;beg_month)); // 計算兩個時間之間的秒數差
    printf("\n 距離本月初已經過了 %.f 秒。\n\n", seconds);
    return 0;
}
</pre>
<p></p><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>